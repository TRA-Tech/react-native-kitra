"use strict";(self.webpackChunkkitra_doc=self.webpackChunkkitra_doc||[]).push([[289],{4022:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>h,frontMatter:()=>r,metadata:()=>i,toc:()=>c});var d=n(5893),o=n(1151);const r={sidebar_position:9},s="Dropdown",i={id:"components/dropdown",title:"Dropdown",description:"The Dropdown component provides a dropdown menu functionality. It allows users to select one or multiple items from a list of options displayed in a dropdown menu. The component is highly customizable with various props that can be passed to modify its appearance and behavior.",source:"@site/docs/components/dropdown.md",sourceDirName:"components",slug:"/components/dropdown",permalink:"/react-native-kitra/docs/components/dropdown",draft:!1,unlisted:!1,editUrl:"https://github.com/TRA-Tech/react-native-kitra/tree/main/docs/components/dropdown.md",tags:[],version:"current",lastUpdatedAt:1705498541,formattedLastUpdatedAt:"Jan 17, 2024",sidebarPosition:9,frontMatter:{sidebar_position:9},sidebar:"ComponentsSidebar",previous:{title:"Divider",permalink:"/react-native-kitra/docs/components/divider"},next:{title:"Icon",permalink:"/react-native-kitra/docs/components/icon"}},l={},c=[{value:"Import",id:"import",level:3},{value:"Usage",id:"usage",level:3},{value:"Props",id:"props",level:3}];function a(e){const t={a:"a",code:"code",h1:"h1",h3:"h3",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,o.a)(),...e.components};return(0,d.jsxs)(d.Fragment,{children:[(0,d.jsx)(t.h1,{id:"dropdown",children:"Dropdown"}),"\n",(0,d.jsxs)(t.p,{children:["The ",(0,d.jsx)(t.strong,{children:"Dropdown"})," component provides a dropdown menu functionality. It allows users to select one or multiple items from a list of options displayed in a dropdown menu. The component is highly customizable with various props that can be passed to modify its appearance and behavior."]}),"\n",(0,d.jsx)(t.h3,{id:"import",children:"Import"}),"\n",(0,d.jsx)(t.pre,{children:(0,d.jsx)(t.code,{className:"language-js",children:"import { Dropdown } from '@tra-tech/react-native-kitra';\n"})}),"\n",(0,d.jsx)(t.h3,{id:"usage",children:"Usage"}),"\n",(0,d.jsx)(t.pre,{children:(0,d.jsx)(t.code,{className:"language-js",children:"import { Dropdown } from '@tra-tech/react-native-kitra';\nimport { useState } from 'react';\nimport { View } from 'react-native';\n\nconst data = [{ label: 'Item 1', value: 1 }, { label: 'Item 2', value: 2 }, { label: 'Item 3', value: 3 }, { label: 'Item 4', value: 4 }, { label: 'Item 5', value: 5 }];\n\nconst App = () => {\n  const [select, setSelect] = useState();\n  return (\n    <View style={{ rowGap: 100 }}>\n      <View style={{ zIndex: 101, flex: 1 }}>\n        <Dropdown\n          multiple\n          selectall\n          containerStyle={{ marginTop: 20 }}\n          buttonTitle=\"Please Select\"\n          buttonTextStyle={{ color: 'black', marginLeft: 18 }}\n          rowTextStyle={{ color: '#8973CD' }}\n          buttonBackgrounColor={{ focusBackground: '#8973CD', defaultBackground: '#F9F8FD' }}\n          displayLength={4}\n          rowStyle={{ backgroundColor: '#F9F8FD' }}\n          buttonStyle={{ width: '100%', height: 51, borderRadius: 50 }}\n          listContainerStyle={{ backgroundColor: '#F9F8FD' }}\n          onSelect={x => setSelect(x.label)}\n          displayedButtonValue={x => x.label}\n          displayedRowValue={x => x.label}\n          data={data}\n        />\n      </View>\n      <View style={{ flex: 1 }}>\n        <Dropdown\n          selectall\n          containerStyle={{ marginTop: 20 }}\n          buttonTitle=\"Please Select\"\n          buttonTextStyle={{ color: 'black', marginLeft: 18 }}\n          rowTextStyle={{ color: '#8973CD' }}\n          buttonBackgrounColor={{ focusBackground: '#8973CD', defaultBackground: '#F9F8FD' }}\n          displayLength={4}\n          rowStyle={{ backgroundColor: '#F9F8FD' }}\n          buttonStyle={{ width: '100%', height: 51, borderRadius: 50 }}\n          listContainerStyle={{ backgroundColor: '#F9F8FD' }}\n          onSelect={x => setSelect(x.value)}\n          displayedButtonValue={x => x.label}\n          displayedRowValue={x => x.label}\n          data={data}\n        />\n      </View>\n    </View>\n  );\n};\n\nexport default App;\n"})}),"\n",(0,d.jsx)(t.h3,{id:"props",children:"Props"}),"\n",(0,d.jsxs)(t.table,{children:[(0,d.jsx)(t.thead,{children:(0,d.jsxs)(t.tr,{children:[(0,d.jsx)(t.th,{children:"Prop name"}),(0,d.jsx)(t.th,{children:"Type"}),(0,d.jsx)(t.th,{children:"Required"}),(0,d.jsx)(t.th,{children:"Description"})]})}),(0,d.jsxs)(t.tbody,{children:[(0,d.jsxs)(t.tr,{children:[(0,d.jsx)(t.td,{children:"multiple"}),(0,d.jsx)(t.td,{children:(0,d.jsx)(t.code,{children:"boolean"})}),(0,d.jsx)(t.td,{children:"No"}),(0,d.jsxs)(t.td,{children:["Determines whether the dropdown should allow multiple selections. Default value: ",(0,d.jsx)(t.code,{children:"false"})]})]}),(0,d.jsxs)(t.tr,{children:[(0,d.jsx)(t.td,{children:"disabled"}),(0,d.jsx)(t.td,{children:(0,d.jsx)(t.code,{children:"boolean"})}),(0,d.jsx)(t.td,{children:"No"}),(0,d.jsxs)(t.td,{children:["Determines whether the dropdown is disabled. Default value: ",(0,d.jsx)(t.code,{children:"false"}),"."]})]}),(0,d.jsxs)(t.tr,{children:[(0,d.jsx)(t.td,{children:"left"}),(0,d.jsx)(t.td,{children:(0,d.jsx)(t.a,{href:"https://reactnative.dev/docs/react-node",children:(0,d.jsx)(t.code,{children:"(isVisible:boolean)=>React.ReactNode"})})}),(0,d.jsx)(t.td,{children:"No"}),(0,d.jsx)(t.td,{children:"A React node that will be created to the left of the dropdown button and return its visible."})]}),(0,d.jsxs)(t.tr,{children:[(0,d.jsx)(t.td,{children:"right"}),(0,d.jsx)(t.td,{children:(0,d.jsx)(t.a,{href:"https://reactnative.dev/docs/react-node",children:(0,d.jsx)(t.code,{children:"(isVisible:boolean)=>React.ReactNode"})})}),(0,d.jsx)(t.td,{children:"No"}),(0,d.jsx)(t.td,{children:"A React node that will be created to the right of the dropdown button and return its visible."})]}),(0,d.jsxs)(t.tr,{children:[(0,d.jsx)(t.td,{children:"data"}),(0,d.jsx)(t.td,{children:(0,d.jsxs)("code",{children:[" Array","<","(string | object )> "]})}),(0,d.jsx)(t.td,{children:"Yes"}),(0,d.jsx)(t.td,{children:"An array of objects or strings to be used as options in the dropdown list."})]}),(0,d.jsxs)(t.tr,{children:[(0,d.jsx)(t.td,{children:"displayedRowValue"}),(0,d.jsx)(t.td,{children:(0,d.jsx)("code",{children:"(item: string | object) => any"})}),(0,d.jsx)(t.td,{children:"Yes"}),(0,d.jsxs)(t.td,{children:["A function that takes an item from the ",(0,d.jsx)(t.code,{children:"data"})," array and returns a value to be displayed in the dropdown list."]})]}),(0,d.jsxs)(t.tr,{children:[(0,d.jsx)(t.td,{children:"displayedButtonValue"}),(0,d.jsx)(t.td,{children:(0,d.jsx)("code",{children:"(item: string | object) => any "})}),(0,d.jsx)(t.td,{children:"Yes"}),(0,d.jsxs)(t.td,{children:["A function that takes an item from the ",(0,d.jsx)(t.code,{children:"data"})," array and returns a value to be displayed on the dropdown button."]})]}),(0,d.jsxs)(t.tr,{children:[(0,d.jsx)(t.td,{children:"listContainerStyle"}),(0,d.jsx)(t.td,{children:(0,d.jsx)(t.a,{href:"https://reactnative.dev/docs/view-style-props",children:(0,d.jsx)(t.code,{children:"StyleProp<ViewStyle>"})})}),(0,d.jsx)(t.td,{children:"No"}),(0,d.jsx)(t.td,{children:"An object containing styles to be applied to the dropdown list container."})]}),(0,d.jsxs)(t.tr,{children:[(0,d.jsx)(t.td,{children:"defaultValue"}),(0,d.jsx)(t.td,{children:(0,d.jsx)(t.code,{children:"Array<string | object>"})}),(0,d.jsx)(t.td,{children:"No"}),(0,d.jsx)(t.td,{children:"An array of objects or strings to be pre-selected in the dropdown."})]}),(0,d.jsxs)(t.tr,{children:[(0,d.jsx)(t.td,{children:"displayLength"}),(0,d.jsx)(t.td,{children:(0,d.jsx)(t.code,{children:"number"})}),(0,d.jsx)(t.td,{children:"No"}),(0,d.jsx)(t.td,{children:"The number of  items to display in the button."})]}),(0,d.jsxs)(t.tr,{children:[(0,d.jsx)(t.td,{children:"buttonTitle"}),(0,d.jsx)(t.td,{children:(0,d.jsx)(t.code,{children:"string"})}),(0,d.jsx)(t.td,{children:"No"}),(0,d.jsx)(t.td,{children:"The default text to be displayed on the dropdown button when no options are selected."})]}),(0,d.jsxs)(t.tr,{children:[(0,d.jsx)(t.td,{children:"rowStyle"}),(0,d.jsx)(t.td,{children:(0,d.jsx)(t.a,{href:"https://reactnative.dev/docs/view-style-props",children:(0,d.jsx)(t.code,{children:"StyleProp<ViewStyle>"})})}),(0,d.jsx)(t.td,{children:"No"}),(0,d.jsx)(t.td,{children:"An object containing styles to be applied to each item in the dropdown list."})]}),(0,d.jsxs)(t.tr,{children:[(0,d.jsx)(t.td,{children:"buttonStyle"}),(0,d.jsx)(t.td,{children:(0,d.jsx)(t.a,{href:"https://reactnative.dev/docs/view-style-props",children:(0,d.jsx)(t.code,{children:"StyleProp<ViewStyle>"})})}),(0,d.jsx)(t.td,{children:"No"}),(0,d.jsx)(t.td,{children:"An object containing styles to be applied to the dropdown button."})]}),(0,d.jsxs)(t.tr,{children:[(0,d.jsx)(t.td,{children:"buttonTextStyle"}),(0,d.jsx)(t.td,{children:(0,d.jsx)(t.a,{href:"https://reactnative.dev/docs/text-style-props",children:(0,d.jsx)(t.code,{children:"StyleProp<TextStyle>"})})}),(0,d.jsx)(t.td,{children:"No"}),(0,d.jsx)(t.td,{children:"An object containing styles to be applied to the text inside the dropdown button."})]}),(0,d.jsxs)(t.tr,{children:[(0,d.jsx)(t.td,{children:"selectall"}),(0,d.jsx)(t.td,{children:(0,d.jsx)(t.code,{children:"boolean"})}),(0,d.jsx)(t.td,{children:"No"}),(0,d.jsx)(t.td,{children:'Whether to include a "Select All" option in the dropdown.'})]}),(0,d.jsxs)(t.tr,{children:[(0,d.jsx)(t.td,{children:"onSelect"}),(0,d.jsx)(t.td,{children:(0,d.jsx)("code",{children:"(item: Array<string> | Array<object> | string | object) => void"})}),(0,d.jsx)(t.td,{children:"No"}),(0,d.jsx)(t.td,{children:"A function to be called whenever an item is selected in the dropdown."})]}),(0,d.jsxs)(t.tr,{children:[(0,d.jsx)(t.td,{children:"onComplete"}),(0,d.jsx)(t.td,{children:(0,d.jsx)("code",{children:"(item: object | string) => void  "})}),(0,d.jsx)(t.td,{children:"No"}),(0,d.jsx)(t.td,{children:"A function to be called whenever submit button pressed."})]}),(0,d.jsxs)(t.tr,{children:[(0,d.jsx)(t.td,{children:"rowTextStyle"}),(0,d.jsx)(t.td,{children:(0,d.jsx)(t.a,{href:"https://reactnative.dev/docs/text-style-props",children:(0,d.jsx)(t.code,{children:"StyleProp<TextStyle>"})})}),(0,d.jsx)(t.td,{children:"No"}),(0,d.jsx)(t.td,{children:"An object containing styles to be applied to the text inside each item in the dropdown list."})]}),(0,d.jsxs)(t.tr,{children:[(0,d.jsx)(t.td,{children:"containerStyle"}),(0,d.jsx)(t.td,{children:(0,d.jsx)(t.a,{href:"https://reactnative.dev/docs/view-style-props",children:(0,d.jsx)(t.code,{children:"StyleProp<ViewStyle>"})})}),(0,d.jsx)(t.td,{children:"No"}),(0,d.jsx)(t.td,{children:"An object containing styles to be applied to the dropdown container."})]}),(0,d.jsxs)(t.tr,{children:[(0,d.jsx)(t.td,{children:"buttonBackgrounColor"}),(0,d.jsx)(t.td,{children:(0,d.jsx)(t.code,{children:"{ focusBackground: string, defaultBackground: string }"})}),(0,d.jsx)(t.td,{children:"No"}),(0,d.jsx)(t.td,{children:"Used to customize the background color of the dropdown."})]}),(0,d.jsxs)(t.tr,{children:[(0,d.jsx)(t.td,{children:"iconStyle"}),(0,d.jsxs)(t.td,{children:[(0,d.jsx)(t.code,{children:"{ color: string,"}),(0,d.jsx)("br",{}),(0,d.jsx)(t.code,{children:" container: StyleProp<ViewStyle> }"})]}),(0,d.jsx)(t.td,{children:"No"}),(0,d.jsx)(t.td,{children:"The color property determines the icon's color, and the container property defines the style of the container that holds the icon."})]}),(0,d.jsxs)(t.tr,{children:[(0,d.jsx)(t.td,{children:"autoPosition"}),(0,d.jsx)(t.td,{children:(0,d.jsx)(t.code,{children:"boolean"})}),(0,d.jsx)(t.td,{children:"No"}),(0,d.jsxs)(t.td,{children:["Controls whether the dropdown component's dropdown menu is positioned automatically. Default value: ",(0,d.jsx)(t.code,{children:"true"})]})]}),(0,d.jsxs)(t.tr,{children:[(0,d.jsx)(t.td,{children:"theme"}),(0,d.jsx)(t.td,{children:(0,d.jsx)(t.code,{children:"UITheme"})}),(0,d.jsx)(t.td,{children:"No"}),(0,d.jsx)(t.td,{children:"The theme to use for the component."})]}),(0,d.jsxs)(t.tr,{children:[(0,d.jsx)(t.td,{children:"typography"}),(0,d.jsx)(t.td,{children:(0,d.jsx)(t.code,{children:"UITypography"})}),(0,d.jsx)(t.td,{children:"No"}),(0,d.jsx)(t.td,{children:"The typography to use for the component."})]})]})]})]})}function h(e={}){const{wrapper:t}={...(0,o.a)(),...e.components};return t?(0,d.jsx)(t,{...e,children:(0,d.jsx)(a,{...e})}):a(e)}},1151:(e,t,n)=>{n.d(t,{Z:()=>i,a:()=>s});var d=n(7294);const o={},r=d.createContext(o);function s(e){const t=d.useContext(r);return d.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function i(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:s(e.components),d.createElement(r.Provider,{value:t},e.children)}}}]);