"use strict";(self.webpackChunkkitra_doc=self.webpackChunkkitra_doc||[]).push([[939],{8462:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>i,contentTitle:()=>r,default:()=>a,frontMatter:()=>s,metadata:()=>d,toc:()=>h});var c=n(5893),o=n(1151);const s={sidebar_position:6},r="CheckBox",d={id:"components/checkbox",title:"CheckBox",description:"The CheckBox component is a UI element that allows the user to toggle between two states: checked and unchecked.",source:"@site/versioned_docs/version-1.x/components/checkbox.md",sourceDirName:"components",slug:"/components/checkbox",permalink:"/react-native-kitra/docs/components/checkbox",draft:!1,unlisted:!1,editUrl:"https://github.com/TRA-Tech/react-native-kitra/tree/main/doc/versioned_docs/version-1.x/components/checkbox.md",tags:[],version:"1.x",lastUpdatedAt:1713789580,formattedLastUpdatedAt:"Apr 22, 2024",sidebarPosition:6,frontMatter:{sidebar_position:6},sidebar:"ComponentsSidebar",previous:{title:"Button",permalink:"/react-native-kitra/docs/components/button"},next:{title:"Chip",permalink:"/react-native-kitra/docs/components/chip"}},i={},h=[{value:"Import",id:"import",level:3},{value:"Usage",id:"usage",level:3},{value:"Props",id:"props",level:3}];function l(e){const t={a:"a",code:"code",h1:"h1",h3:"h3",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,o.a)(),...e.components};return(0,c.jsxs)(c.Fragment,{children:[(0,c.jsx)(t.h1,{id:"checkbox",children:"CheckBox"}),"\n",(0,c.jsxs)(t.p,{children:["The ",(0,c.jsx)(t.strong,{children:"CheckBox"})," component is a UI element that allows the user to toggle between two states: checked and unchecked."]}),"\n",(0,c.jsx)(t.h3,{id:"import",children:"Import"}),"\n",(0,c.jsx)(t.pre,{children:(0,c.jsx)(t.code,{className:"language-js",children:"import { CheckBox } from '@tra-tech/react-native-kitra';\n"})}),"\n",(0,c.jsx)(t.h3,{id:"usage",children:"Usage"}),"\n",(0,c.jsx)(t.pre,{children:(0,c.jsx)(t.code,{className:"language-js",children:"import { CheckBox } from '@tra-tech/react-native-kitra';\nimport { useState } from 'react';\nimport { View } from 'react-native';\n\nconst App = () => {\n  const [value, setValue] = useState(false);\n\n  return (\n    <View style={{ justifyContent: 'center', flex: 1 }}>\n      <CheckBox\n        style={{ alignSelf: 'center' }}\n        value={value}\n        onChange={event => console.log(event)}\n        onPress={() => setValue(prev => !prev)}\n        iconColor=\"red\"\n      />\n    </View>\n  );\n};\n\nexport default App;\n\n"})}),"\n",(0,c.jsx)(t.h3,{id:"props",children:"Props"}),"\n",(0,c.jsxs)(t.table,{children:[(0,c.jsx)(t.thead,{children:(0,c.jsxs)(t.tr,{children:[(0,c.jsx)(t.th,{children:"Prop name"}),(0,c.jsx)(t.th,{children:"Type"}),(0,c.jsx)(t.th,{children:"Required"}),(0,c.jsx)(t.th,{children:"Description"})]})}),(0,c.jsxs)(t.tbody,{children:[(0,c.jsxs)(t.tr,{children:[(0,c.jsx)(t.td,{children:"value"}),(0,c.jsx)(t.td,{children:(0,c.jsx)(t.code,{children:"boolean"})}),(0,c.jsx)(t.td,{children:"No"}),(0,c.jsx)(t.td,{children:"Determines whether the checkbox is checked or unchecked"})]}),(0,c.jsxs)(t.tr,{children:[(0,c.jsx)(t.td,{children:"onChange"}),(0,c.jsx)(t.td,{children:(0,c.jsx)(t.code,{children:"(value: boolean) => void"})}),(0,c.jsx)(t.td,{children:"No"}),(0,c.jsx)(t.td,{children:"A callback function that is called when the checkbox is pressed, with the new state value as an argument"})]}),(0,c.jsxs)(t.tr,{children:[(0,c.jsx)(t.td,{children:"style"}),(0,c.jsx)(t.td,{children:(0,c.jsx)(t.a,{href:"https://reactnative.dev/docs/view-style-props",children:(0,c.jsx)(t.code,{children:"StyleProp<ViewStyle>"})})}),(0,c.jsx)(t.td,{children:"No"}),(0,c.jsx)(t.td,{children:"Additional styles to apply to the checkbox container"})]}),(0,c.jsxs)(t.tr,{children:[(0,c.jsx)(t.td,{children:"disabled"}),(0,c.jsx)(t.td,{children:(0,c.jsx)(t.code,{children:"boolean"})}),(0,c.jsx)(t.td,{children:"No"}),(0,c.jsx)(t.td,{children:"Determines whether the checkbox is disabled or not"})]}),(0,c.jsxs)(t.tr,{children:[(0,c.jsx)(t.td,{children:"iconColor"}),(0,c.jsx)(t.td,{children:(0,c.jsx)(t.code,{children:"string"})}),(0,c.jsx)(t.td,{children:"No"}),(0,c.jsx)(t.td,{children:"The color of the checkmark icon"})]}),(0,c.jsxs)(t.tr,{children:[(0,c.jsx)(t.td,{children:"theme"}),(0,c.jsx)(t.td,{children:(0,c.jsx)(t.code,{children:"UITheme"})}),(0,c.jsx)(t.td,{children:"No"}),(0,c.jsx)(t.td,{children:"An object containing the color palette used for the checkbox"})]}),(0,c.jsxs)(t.tr,{children:[(0,c.jsx)(t.td,{children:"...TouchableOpacityProps"}),(0,c.jsx)(t.td,{children:(0,c.jsx)(t.a,{href:"https://reactnative.dev/docs/touchableopacity#props",children:(0,c.jsx)(t.code,{children:"...TouchableOpacityProps"})})}),(0,c.jsx)(t.td,{children:"No"}),(0,c.jsxs)(t.td,{children:["Any additional props to be passed to the underlying ",(0,c.jsx)(t.code,{children:"TouchableOpacity"})," component."]})]})]})]})]})}function a(e={}){const{wrapper:t}={...(0,o.a)(),...e.components};return t?(0,c.jsx)(t,{...e,children:(0,c.jsx)(l,{...e})}):l(e)}},1151:(e,t,n)=>{n.d(t,{Z:()=>d,a:()=>r});var c=n(7294);const o={},s=c.createContext(o);function r(e){const t=c.useContext(s);return c.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function d(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:r(e.components),c.createElement(s.Provider,{value:t},e.children)}}}]);